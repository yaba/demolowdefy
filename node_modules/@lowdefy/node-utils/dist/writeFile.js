"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _helpers = require("@lowdefy/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var mkdirPromise = (0, _util.promisify)(_fs.default.mkdir);
var writeFilePromise = (0, _util.promisify)(_fs.default.writeFile);

function writeFile(_x) {
  return _writeFile.apply(this, arguments);
}

function _writeFile() {
  _writeFile = _asyncToGenerator(function* (_ref) {
    var {
      filePath,
      content
    } = _ref;

    if (!_helpers.type.isString(filePath)) {
      throw new Error("Could not write file, file path should be a string, received ".concat(JSON.stringify(filePath), "."));
    }

    if (filePath !== _path.default.resolve(filePath)) {
      throw new Error("Could not write file, file path was not resolved, received ".concat(JSON.stringify(filePath), "."));
    }

    try {
      yield writeFilePromise(filePath, content);
    } catch (error) {
      if (error.code === 'ENOENT') {
        yield mkdirPromise(_path.default.dirname(filePath), {
          recursive: true
        });
        yield writeFilePromise(filePath, content);
        return;
      }

      throw error;
    }
  });
  return _writeFile.apply(this, arguments);
}

var _default = writeFile;
exports.default = _default;