"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _helpers = require("@lowdefy/helpers");

var _common = _interopRequireDefault(require("./common"));

var _node = _interopRequireDefault(require("./node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NodeParser {
  constructor() {
    var {
      arrayIndices,
      input,
      lowdefyGlobal,
      secrets,
      state,
      urlQuery
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.arrayIndices = arrayIndices;
    this.input = input;
    this.lowdefyGlobal = lowdefyGlobal;
    this.secrets = secrets;
    this.state = state;
    this.urlQuery = urlQuery;
    this.parse = this.parse.bind(this);
    this.operations = _objectSpread(_objectSpread({}, _common.default), _node.default);
  }

  parse(_ref) {
    var {
      args,
      event,
      input,
      location
    } = _ref;

    if (_helpers.type.isUndefined(input)) {
      return {
        output: input,
        errors: []
      };
    }

    if (event && !_helpers.type.isObject(event)) {
      throw new Error('Operator parser event must be a object.');
    }

    if (args && !_helpers.type.isArray(args)) {
      throw new Error('Operator parser args must be an array.');
    }

    if (location && !_helpers.type.isString(location)) {
      throw new Error('Operator parser location must be a string.');
    }

    var errors = [];

    var reviver = (_, value) => {
      if (_helpers.type.isObject(value) && Object.keys(value).length === 1) {
        var key = Object.keys(value)[0];
        var [op, methodName] = key.split('.');

        try {
          if (!_helpers.type.isUndefined(this.operations[op])) {
            var res = this.operations[op]({
              args,
              arrayIndices: this.arrayIndices,
              env: 'node',
              event,
              input: this.input,
              location,
              lowdefyGlobal: this.lowdefyGlobal,
              methodName,
              operations: this.operations,
              params: value[key],
              secrets: this.secrets,
              state: this.state,
              urlQuery: this.urlQuery,
              parser: this
            });
            return res;
          }
        } catch (e) {
          errors.push(e);
          console.error(e);
          return null;
        }
      }

      return value;
    };

    return {
      output: _helpers.serializer.copy(input, {
        reviver
      }),
      errors
    };
  }

}

var _default = NodeParser;
exports.default = _default;