"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _helpers = require("@lowdefy/helpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _operator(options) {
  var {
    operations,
    params,
    location
  } = options;

  if (!_helpers.type.isString(params.name)) {
    throw new Error("Operator Error: _operator.name must be a valid operator name as string. Received: ".concat(JSON.stringify(params), " at ").concat(location, "."));
  }

  if (params.name === '_operator') {
    throw new Error("Operator Error: _operator.name cannot be set to _operator to infinite avoid loop reference. Received: ".concat(JSON.stringify(params), " at ").concat(location, "."));
  }

  if (params.name.includes('experimental')) {
    throw new Error("Operator Error: Experimental operators cannot be used with _operator. Received: ".concat(JSON.stringify(params), " at ").concat(location, "."));
  }

  var [operator, methodName] = params.name.split('.');

  if (Object.prototype.hasOwnProperty.call(operations, operator)) {
    return operations[operator](_objectSpread(_objectSpread({}, options), {}, {
      location,
      params: params && params.params,
      methodName
    }));
  }

  throw new Error("Operator Error: _operator - Invalid operator name. Received: ".concat(JSON.stringify(params), " at ").concat(location, "."));
}

var _default = _operator;
exports.default = _default;