"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mingo = _interopRequireDefault(require("mingo"));

var _helpers = require("@lowdefy/helpers");

var _runClass = _interopRequireDefault(require("../runClass"));

require("mingo/init/system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  Copyright 2020-2021 Lowdefy, Inc

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
function aggregate(data, pipeline) {
  if (!_helpers.type.isArray(data)) {
    throw new Error('Data must be of type array.');
  }

  if (!_helpers.type.isArray(pipeline)) {
    throw new Error('Pipeline must be of type array.');
  }

  var agg = new _mingo.default.Aggregator(pipeline);
  return agg.run(data);
}

function expr(data, expr) {
  if (!_helpers.type.isObject(data)) {
    throw new Error('Data must be of type object.');
  }

  var agg = new _mingo.default.Aggregator([{
    $project: {
      value: expr
    }
  }]);
  var res = agg.run([data]);
  return (0, _helpers.get)(res, '0.value', {
    default: null
  });
}

function test(data, test) {
  if (!_helpers.type.isObject(data)) {
    throw new Error('Data must be of type object.');
  }

  if (!_helpers.type.isObject(test)) {
    throw new Error('Query test must be of type object.');
  }

  var query = new _mingo.default.Query(test);
  return query.test(data);
}

var meta = {
  aggregate: {
    namedArgs: ['on', 'pipeline'],
    validTypes: ['array', 'object']
  },
  expr: {
    namedArgs: ['on', 'expr'],
    validTypes: ['array', 'object']
  },
  test: {
    namedArgs: ['on', 'test'],
    validTypes: ['array', 'object']
  }
};
var functions = {
  aggregate,
  expr,
  test
};

function mql(_ref) {
  var {
    params,
    location,
    methodName
  } = _ref;
  return (0, _runClass.default)({
    functions,
    location,
    meta,
    methodName,
    operator: '_mql',
    params
  });
}

var _default = mql;
exports.default = _default;