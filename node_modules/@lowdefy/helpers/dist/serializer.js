"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _type = _interopRequireDefault(require("./type"));

var _stableStringify = _interopRequireDefault(require("./stableStringify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var makeReplacer = (customReplacer, isoStringDates) => (key, value) => {
  var dateReplacer = date => ({
    _date: date.valueOf()
  });

  if (isoStringDates) {
    dateReplacer = date => ({
      _date: date.toISOString()
    });
  }

  var newValue = value;

  if (customReplacer) {
    newValue = customReplacer(key, value);
  }

  if (_type.default.isObject(newValue)) {
    Object.keys(newValue).forEach(k => {
      if (_type.default.isDate(newValue[k])) {
        // shallow copy original value before reassigning a value in order not to mutate original value
        newValue = _objectSpread({}, newValue);
        newValue[k] = dateReplacer(newValue[k]);
      }
    });
    return newValue;
  }

  if (_type.default.isArray(newValue)) {
    return newValue.map(item => {
      if (_type.default.isDate(item)) {
        return dateReplacer(item);
      }

      return item;
    });
  }

  return newValue;
};

var makeReviver = customReviver => (key, value) => {
  var newValue = value;

  if (customReviver) {
    newValue = customReviver(key, value);
  }

  if (_type.default.isObject(newValue) && !_type.default.isUndefined(newValue._date)) {
    if (_type.default.isInt(newValue._date)) {
      return new Date(newValue._date);
    }

    if (newValue._date === 'now') {
      return newValue;
    }

    var result = new Date(newValue._date);

    if (!_type.default.isDate(result)) {
      return newValue;
    }

    return result;
  }

  return newValue;
};

var serialize = function serialize(json) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (_type.default.isUndefined(json)) return json;

  if (_type.default.isDate(json)) {
    if (options.isoStringDates) {
      return {
        _date: json.toISOString()
      };
    }

    return {
      _date: json.valueOf()
    };
  }

  return JSON.parse(JSON.stringify(json, makeReplacer(options.replacer, options.isoStringDates)));
};

var serializeToString = function serializeToString(json) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (_type.default.isUndefined(json)) return json;

  if (_type.default.isDate(json)) {
    if (options.isoStringDates) {
      return "{ \"_date\": \"".concat(json.toISOString(), "\" }");
    }

    return "{ \"_date\": ".concat(json.valueOf(), " }");
  }

  if (options.stable) {
    return (0, _stableStringify.default)(json, {
      replacer: makeReplacer(options.replacer),
      space: options.space
    });
  }

  return JSON.stringify(json, makeReplacer(options.replacer, options.isoStringDates), options.space);
};

var deserialize = function deserialize(json) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (_type.default.isUndefined(json)) return json;
  return JSON.parse(JSON.stringify(json), makeReviver(options.reviver));
};

var deserializeFromString = function deserializeFromString(str) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (_type.default.isUndefined(str)) return str;
  return JSON.parse(str, makeReviver(options.reviver));
};

var copy = function copy(json) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (_type.default.isUndefined(json)) return undefined;
  if (_type.default.isDate(json)) return new Date(json.valueOf());
  return JSON.parse(JSON.stringify(json, makeReplacer(options.replacer)), makeReviver(options.reviver));
};

var serializer = {
  copy,
  serialize,
  serializeToString,
  deserialize,
  deserializeFromString
};
var _default = serializer;
exports.default = _default;