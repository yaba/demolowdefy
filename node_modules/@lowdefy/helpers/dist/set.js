"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.split = split;
exports.default = void 0;

var _type = _interopRequireDefault(require("./type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-plusplus */

/* eslint-disable no-use-before-define */

/* eslint-disable no-param-reassign */

/*
  Copyright 2020-2021 Lowdefy, Inc

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
// Derived from source:
// https://github.com/jonschlinkert/set-value/blob/master/index.js
// https://www.npmjs.com/package/set-value
// The MIT License (MIT)
// Copyright (c) 2014-2018, Jon Schlinkert.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function isValidKey(key) {
  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';
}

function isObjectOrFunction(val) {
  return val !== null && (typeof val === 'object' || typeof val === 'function');
}

function result(target, path, value, merge) {
  if (merge && isObjectOrFunction(target[path]) && isObjectOrFunction(value)) {
    target[path] = merge({}, target[path], value);
  } else {
    target[path] = value;
  }
} // eslint-disable-next-line no-use-before-define


set.memo = {};

function set(target, path, value, options) {
  if (!_type.default.isObject(target)) {
    return target;
  }

  var opts = options || {};

  if (!_type.default.isArray(path) && !_type.default.isString(path)) {
    return target;
  }

  var {
    merge
  } = opts;

  if (merge && typeof merge !== 'function') {
    merge = Object.assign;
  }

  var keys = (_type.default.isArray(path) ? path : split(path, opts)).filter(isValidKey);
  var len = keys.length;
  var orig = target;

  if (!options && keys.length === 1) {
    result(target, keys[0], value, merge);
    return target;
  }

  for (var i = 0; i < len; i++) {
    var prop = keys[i];
    var propUp = keys[i + 1]; // changed to set an array value where the array was undefined be assigning value

    if (!isObjectOrFunction(target[prop]) && !_type.default.isInt(parseInt(propUp, 10))) {
      // changed
      target[prop] = {};
    } else if (!isObjectOrFunction(target[prop]) && _type.default.isInt(parseInt(propUp, 10))) {
      // added
      target[prop] = []; // added
    }

    if (i === len - 1) {
      result(target, prop, value, merge);
      break;
    }

    target = target[prop];
  }

  return orig;
}

function createKey(pattern, options) {
  var id = pattern;

  if (typeof options === 'undefined') {
    return "".concat(id);
  }

  var keys = Object.keys(options);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    id += ";".concat(key, "=").concat(String(options[key]));
  }

  return id;
}

function split(path, options) {
  var id = createKey(path, options);
  if (set.memo[id]) return set.memo[id];
  var char = options && options.separator ? options.separator : '.';
  var keys = [];
  var res = [];

  if (options && typeof options.split === 'function') {
    keys = options.split(path);
  } else {
    keys = path.split(char);
  }

  for (var i = 0; i < keys.length; i++) {
    var prop = keys[i];

    while (prop && prop.slice(-1) === '\\' && keys[i + 1]) {
      prop = prop.slice(0, -1) + char + keys[++i];
    }

    res.push(prop);
  }

  set.memo[id] = res;
  return res;
}

var _default = set;
exports.default = _default;