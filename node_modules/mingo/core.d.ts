import { AnyVal, Callback, HashFunction, RawObject } from "./util";
/** Represents an array of documents */
export declare type Collection = Array<RawObject>;
/**
 * Resolves the given string to a Collection.
 * This is useful for operators that require a second collection to use such as $lookup and $out.
 * The collection is not cached and will be resolved each time it is used.
 */
export declare type CollectionResolver = (name: string) => Collection;
/** Specification for collation options */
export interface CollationSpec {
    readonly locale: string;
    readonly caseLevel?: boolean;
    readonly caseFirst?: string;
    readonly strength?: number;
    readonly numericOrdering?: boolean;
    readonly alternate?: string;
    readonly maxVariable?: string;
    readonly backwards?: boolean;
}
/**
 * Generic options interface passed down to all operators
 */
export interface Options extends RawObject {
    readonly idKey: string;
    readonly collation?: CollationSpec;
    readonly hashFunction?: HashFunction;
    readonly collectionResolver?: CollectionResolver;
}
/** Map of operator functions */
export declare type OperatorMap = Record<string, Callback<AnyVal>>;
/**
 * Creates an Option from another required keys are initialized
 * @param options Options
 */
export declare function makeOptions(options?: Options): Options;
/**
 * The different groups of operators
 */
export declare enum OperatorType {
    ACCUMULATOR = "accumulator",
    EXPRESSION = "expression",
    PIPELINE = "pipeline",
    PROJECTION = "projection",
    QUERY = "query"
}
/**
 * Register fully specified operators for the given operator class.
 *
 * @param cls Category of the operator
 * @param operators Name of operator
 */
export declare function useOperators(cls: OperatorType, operators: OperatorMap): void;
/**
 * Returns the operator function or null if it is not found
 * @param cls Category of the operator
 * @param operator Name of the operator
 */
export declare function getOperator(cls: OperatorType, operator: string): Callback<AnyVal> | null;
/**
 * Add new operators
 *
 * @param cls the operator class to extend
 * @param operatorFn a callback that accepts internal object state and returns an object of new operators.
 */
export declare function addOperators(cls: OperatorType, operatorFn: Callback<OperatorMap>): void;
interface ComputeOptions extends Options {
    root?: RawObject;
}
/**
 * Computes the value of the expression on the object for the given operator
 *
 * @param obj the current object from the collection
 * @param expr the expression for the given field
 * @param operator the operator to resolve the field with
 * @param options {Object} extra options
 * @returns {*}
 */
export declare function computeValue(obj: AnyVal, expr: AnyVal, operator: string, options?: ComputeOptions): AnyVal;
/**
 * Redact an object
 * @param  {Object} obj The object to redact
 * @param  {*} expr The redact expression
 * @param  {*} options  Options for value
 * @return {*} returns the result of the redacted object
 */
export declare function redact(obj: RawObject, expr: AnyVal, options: ComputeOptions): AnyVal;
export {};
